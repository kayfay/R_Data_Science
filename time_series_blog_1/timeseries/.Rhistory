arima_fit$residuals
predict(arima_fit$residuals)
predict(arima_fit$residuals, n.ahead=12)
predict(arima_fit, n.ahead=12)
arima_fit
predict(arima_fit, n.ahead=12)
predict(arima_fit)
predict(arima_fit$residuals)
predict(arima_fit$residuals, n.ahead=12)
predict(arima_fit$residuals)
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$pred-1.96*arima_fit.predict$se,
         arima_fit.predict$pred,
         arima_fit.predict$pred+1.96*arima_fit.predict$se),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
plot(feddata)
plot(feddata, ylim(c(1992, 2020))
plot(feddata, ylim=c(1992, 2020))
plot(feddata, xlim=c(1992, 2020))
plot(feddata, xlim=c(1992, 2020), ylim=c(150000, 500000))
lines(arima_fit.predict$pred)
arima_fit.predict$pred
arima_fit
attributes(arima_fit)
predict(arima)
predict(arima, n.ahead=12)
predict(arima_fit, n.ahead=12)
str(arima_fit)
arima_fit$fitted
predict(arima_fit$fitted, n.ahead=12)
predict(arima_fit$fitted)
line(arima_fit.predict)
line(arima_fit.predict$pred)
lines(arima_fit.predict$pred)
arima_fit.predict$pred
arima_fit.predict <- predict(arima_fit$fitted)
lines(arima_fit.predict$pred)
arima_fit.predict$pred
arima_fit.predict
lines(arima_fit.predict)
attributes(arima_fit)
attributes(arima_fit.predict)
arima_fit.predict$model
arima_fit.predict$fitted
names(arima_fit.predict)
arima_fit.predict$level
arima_fit.predict$series
arima_fit.predict$x
names(arima_fit.predict)
arima_fit.predict$method
arima_fit.predict$series
arima_fit.predict$residuals
?predict
library(stats)
predict(arima_fit$fitted, n.ahead=12)
arima_fit
attributes(arima_fit)
?predict
library(forecast)
example(auto.arima)
fit <- auto.arima(feddata)
plot(forecast(fit, h=20))
plot(forecast(fit, h=12)
plot(forecast(fit, h=12))
q()
# Federal Reserve Economic Data - from Quandl FRED/A791RX0Q048SBEA Retailer Sales FRED/RETAILSMSA
# Data ranges from Jan 1992 to Sep 2017
# Using the Quandl package to aquire a dataset from the Federal Reserve Economic Data
library(forecast)
library(Quandl)
Quandl.api_key("WFWxpy9oN3qQhzxfDXpT")
feddata <- Quandl("FRED/RETAILSMSA", type="ts")
print("Rplot9")
png(filename="Rplot9.png")
plot.ts(feddata, main = "Federal Reserve Economic Data: Retail Sales", ylab = "Dollars in Thousands"
        ylab = "Years")
dev.off()
plot(diff(feddata))
abline(a=0,b=0)
# autocorrelation function for differenced series
print("Rplot10")
png(filename="Rplot10%d.png")
acf(diff(feddata), xaxp = c(0, 75, 4), lag.max=75, main="")
pacf(diff(feddata), xaxp = c(0, 75, 4), lag.max=75, main="")
dev.off()
# autocorrelation function for an autoregressive integrated moving average
arima_fit <- auto.arima(feddata)
# inspecting
arima_fit
# The coefficients significantly different and  are close to a
# mean of zero standard deviations of the standard error
# autocorrelation function for arima_fit looks good
print("Rplot111 Rplot 112")
png(filename="Rplot10%d.png")
acf(arima_fit$residuals, main="")
pacf(arima_fit$residuals, main="")
dev.off()
# our lag values also aren't crossing the significant zones
print("Rplot121, Rplot122, Rplot123")
# plotting
plot(arima_fit$residuals, main="",  ylab = "Residuals", xlab="Time")
abline(a=0, b=0)
# histogram
hist(arima_fit$residuals, main="", ylab="Frequency", xlab="Residuals", xlim=c(-0.04, 0.04))
# qq plot
qqnorm(arima_fit$residuals, ylab="Sample Quantiles", xlab="Theoretical Quantiles", main="")
qqline(arima_fit$residuals)
dev.off()
# predict the next 12 months
arima_fit.predict <- predict(arima_fit$fitted)
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$pred-1.96*arima_fit.predict$se,
         arima_fit.predict$pred,
         arima_fit.predict$pred+1.96*arima_fit.predict$se),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
as.data.frame(tail(feddata))
plot(forecast(feddata, h=12),
     main = "Forecast into 2018 of Retailers Sales"
     xlab = "Time in months",
     ylab = "Millions of Dollars",)
# Federal Reserve Economic Data - from Quandl FRED/A791RX0Q048SBEA Retailer Sales FRED/RETAILSMSA
# Data ranges from Jan 1992 to Sep 2017
# Using the Quandl package to aquire a dataset from the Federal Reserve Economic Data
library(forecast)
library(Quandl)
Quandl.api_key("WFWxpy9oN3qQhzxfDXpT")
feddata <- Quandl("FRED/RETAILSMSA", type="ts")
print("Rplot9")
png(filename="Rplot9.png")
plot.ts(feddata, main = "Federal Reserve Economic Data: Retail Sales", ylab = "Dollars in Thousands"
        ylab = "Years")
dev.off()
plot(diff(feddata))
abline(a=0,b=0)
# autocorrelation function for differenced series
print("Rplot10")
png(filename="Rplot10%d.png")
acf(diff(feddata), xaxp = c(0, 75, 4), lag.max=75, main="")
pacf(diff(feddata), xaxp = c(0, 75, 4), lag.max=75, main="")
dev.off()
# autocorrelation function for an autoregressive integrated moving average
arima_fit <- auto.arima(feddata)
# inspecting
arima_fit
# The coefficients significantly different and  are close to a
# mean of zero standard deviations of the standard error
# autocorrelation function for arima_fit looks good
print("Rplot111 Rplot 112")
png(filename="Rplot10%d.png")
acf(arima_fit$residuals, main="")
pacf(arima_fit$residuals, main="")
dev.off()
# our lag values also aren't crossing the significant zones
print("Rplot121, Rplot122, Rplot123")
# plotting
plot(arima_fit$residuals, main="",  ylab = "Residuals", xlab="Time")
abline(a=0, b=0)
# histogram
hist(arima_fit$residuals, main="", ylab="Frequency", xlab="Residuals", xlim=c(-0.04, 0.04))
# qq plot
qqnorm(arima_fit$residuals, ylab="Sample Quantiles", xlab="Theoretical Quantiles", main="")
qqline(arima_fit$residuals)
dev.off()
# predict the next 12 months
arima_fit.predict <- predict(arima_fit$fitted)
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$pred-1.96*arima_fit.predict$se,
         arima_fit.predict$pred,
         arima_fit.predict$pred+1.96*arima_fit.predict$se),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
as.data.frame(tail(feddata))
plot(forecast(feddata, h=12),
     main = "Forecast into 2018 of Retailers Sales",
     xlab = "Time in months",
     ylab = "Millions of Dollars",)
q()
q()
plot(diff(dole.56.92), main="Unemployment benifits in Australia", ylab="", xlab="")
plot(diff(dole.56.92), main="Unemployment benifits in Australia", ylab="", xlab="")
# stationary plot
png(filename="stationary_australia.png")
plot(diff(dole.56.92), main="Unemployment benifits in Australia", ylab="", xlab="")
dev.off()
HoltWinters(diff(dole.56.92), beta=FALSE, gamma=FALSE
)
plot(HoltWinters(diff(dole.56.92), beta=FALSE, gamma=FALSE))
# By using the HoltWinters function we can graph a red smoothed line
png(filename="stationary_australia.png")
plot(HoltWinters(diff(dole.56.92), beta=FALSE, gamma=FALSE))
dev.off()
# stationary plot
png(filename="stationary_australia.png")
plot(diff(dole.56.92), main="Unemployment benifits in Australia", ylab="", xlab="")
dev.off()
# By using the HoltWinters function we can graph a red smoothed line
png(filename="stationary_australia_HW.png")
plot(HoltWinters(diff(dole.56.92), beta=FALSE, gamma=FALSE))
dev.off()
q()
q()
# Federal Reserve Economic Data - from Quandl FRED/A791RX0Q048SBEA Retailer Sales FRED/RETAILSMSA
# Data ranges from Jan 1992 to Sep 2017
# Using the Quandl package to aquire a dataset from the Federal Reserve Economic Data
library(forecast)
library(Quandl)
Quandl.api_key("WFWxpy9oN3qQhzxfDXpT")
feddata <- Quandl("FRED/RETAILSMSA", type="ts")
print("Rplot9")
png(filename="Rplot9.png")
plot.ts(feddata, main = "Federal Reserve Economic Data: Retail Sales", ylab = "Dollars in Thousands",
        xlab = "Years")
dev.off()
plot(diff(feddata))
abline(a=0,b=0)
# autocorrelation function for differenced series
print("Rplot10")
png(filename="Rplot10%d.png")
acf(diff(feddata), xaxp = c(0, 75, 4), lag.max=75, main="")
pacf(diff(feddata), xaxp = c(0, 75, 4), lag.max=75, main="")
dev.off()
# autocorrelation function for an autoregressive integrated moving average
arima_fit <- auto.arima(feddata)
# inspecting
arima_fit
# The coefficients significantly different and  are close to a
# mean of zero standard deviations of the standard error
# autocorrelation function for arima_fit looks good
print("Rplot111 Rplot 112")
png(filename="Rplot10%d.png")
acf(arima_fit$residuals, main="")
pacf(arima_fit$residuals, main="")
dev.off()
# our lag values also aren't crossing the significant zones
print("Rplot121, Rplot122, Rplot123")
# plotting
plot(arima_fit$residuals, main="",  ylab = "Residuals", xlab="Time")
abline(a=0, b=0)
# histogram
hist(arima_fit$residuals, main="", ylab="Frequency", xlab="Residuals", xlim=c(-0.04, 0.04))
# qq plot
qqnorm(arima_fit$residuals, ylab="Sample Quantiles", xlab="Theoretical Quantiles", main="")
qqline(arima_fit$residuals)
dev.off()
# predict the next 12 months
arima_fit.predict <- predict(arima_fit$fitted)
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$pred-1.96*arima_fit.predict$se,
         arima_fit.predict$pred,
         arima_fit.predict$pred+1.96*arima_fit.predict$se),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
as.data.frame(tail(feddata))
plot(forecast(feddata, h=12),
     main = "Forecast into 2018 of Retailer Sales",
     xlab = "Time in Months",
     ylab = "Millions of Dollars",)
# Graph
png(filename="Rplot13%d.png")
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.3, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, bty = "n", las = 1)
plot(forecast(arima_fit, h=2), xlab = "", ylab = "", main = "Forecast into 2018 of Retailer Sales", type="p", axes = FALSE)
axis(1) ; axis(2)
mtext("Time in Months", side = 1, line = 2.5, cex = 1.5)
mtext("Millions of Dollars", side = 2, line = 4.5, cex = 1.5, las = 0)
# Diff Graph
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.3, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.5, bty = "n", las = 1)
plot(diff(arima_fit), xlab = "", ylab = "", main = "", type="b", axes = FALSE)
axis(1) ; axis(2)
mtext("Time in Months", side = 1, line = 2.5, cex = 1.5)
dev.off()
attributes(arima_fit.predit)
attributes(arima_fit.predict)
str(arima_fit.predict$model)
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$pred-1.96*arima_fit.predict$se,
         arima_fit.predict$pred,
         arima_fit.predict$pred+1.96*arima_fit.predict$se),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
matrix(c(arima_fit.predict$pred-1.96*arima_fit.predict$se,
attributes(arima_fit.predict)
arima_fit$mean
arima_fit.predict$mean
arima_fit.predict$level
arima_fit.predict$x
attributes(arima_fit.predict)
arima_fit.predict$upper
attributs(arima_fit.predict)
attributes(arima_fit.predict)
arima_fit$fitted
attributes(arima_fit.predict)
arima_fit.predict$method
arima_fit.predict$series
arima_fit.predict$residuals
attributes(arima_fit.predict)
arima_fit.predict$x
attributes(arima_fit.predict)
arima_fit.predict$model
attributes(arima_fit.predict)
arima_fit.predict$fitted
attributes(arima_fit.predict)
arima_fit.predict$class[1]
arima_fit.predict$class
arima_fit.predict$forecast
arima_fit.predict$model
attributes(arima_fit.predict)
arima_fit.predict$level
arima_fit.predict$x
attributes(arima_fit.predict)
arima_fit.predict$upper
arima_fit.predict$x
arima_fit.predict$[1]
arima_fit.predict[1]
arima_fit.predict[2]
arima_fit.predict[3]
attributes(arima_fit.predict)
arima_fit.predict[3[
arima_fit.predict[3]
arima_fit.predict[4]
arima_fit.predict[5]
arima_fit.predict[6]
arima_fit.predict[7]
arima_fit.predict[8]
arima_fit.predict[9]
arima_fit.predict[10
arima_fit.predict[10]
arima_fit.predict[11]
arima_fit.predict[12]
arima_fit.predict[13]
arima_fit.predict$upper[2]
arima_fit.predict$upper
attributes(arima_fit.predict$upper)
arima_fit.predict$upper#$dimnames[[2]][2]
arima_fit.predict$upper$dimnames[[2]][2]
arima_fit.predict$upper[[2]][2]
arima_fit.predict$upper[[2]
arima_fit.predict$upper[[2]]
arima_fit.predict$upper[[2,]]
arima_fit.predict$upper[2]
arima_fit.predict$upper
arima_fit.predict$upper[,2]
arima_fit.predict$upper[2,]
arima_fit.predict$upper[1,]
arima_fit.predict$upper[1,2]
arima_fit.predict$upper[1,]
arima_fit.predict$upper[1,2]
arima_fit.predict$upper[1,3]
arima_fit.predict$upper[1,2]
arima_fit.predict$upper[,2]
arima_fit.predict$upper[1,2]
arima_fit.predict$upper[1:2,2]
arima_fit.predict$upper[,2]
arima_fit.predict$upper[1,2]
arima_fit.predict$upper[2,2]
arima_fit.predict$upper[3,2]
arima_fit.predict$lower[,2]
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$upper[,2],
         arima_fit.predict$mean,
         arima_fit.predict$lower[,2]),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$upper[,2],
         arima_fit.predict$mean,
         arima_fit.predict$lower[,2]),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$upper[,2],
         arima_fit.predict$mean,
         arima_fit.predict$lower[,2]),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
# Generating and comparing the predictions to the data set
matrix(c(arima_fit.predict$upper[,2],
         arima_fit.predict[1],
         arima_fit.predict$lower[,2]),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
# Generating and comparing the predictions to the data set
attributes(arima_fit$predict)
attributes(arima_fit.predict)
arima_fit$model
arima_fit.predict$model
attributes(arima_fit.predict$model)
arima_fit.predict$model[1]
arima_fit.predict$model[2]
arima_fit.predict$model[3]
arima_fit.predict$model[4]
arima_fit.predict$model[5]
arima_fit.predict$model[6]
arima_fit.predict$model[7]
arima_fit.predict$model[8]
arima_fit.predict$model[9]
arima_fit.predict$model[10]
arima_fit.predict$model[10]
arima_fit.predict$model[11]
arima_fit.predict$model[12]
arima_fit.predict$model[13]
arima_fit.predict$model[14]
arima_fit.predict$model[15]
arima_fit.predict$model[16]
arima_fit.predict$model[17]
arima_fit.predict$model[18]
feddata.predict <- forecast(feddata, h = 24)
attributes(feddata.predict)
feddata.predict$model
attributes(feddata.predict$model)
feddata.predict$model[1]
feddata.predict$model[2]
feddata.predict$model[3]
feddata.predict$model[4]
feddata.predict$model[5]
feddata.predict$model[6]
feddata.predict$model[7]
feddata.predict$model[8]
feddata.predict$model[9]
feddata.predict$model[10]
feddata.predict$model[11]
feddata.predict$model[12]
feddata.predict$model[13]
feddata.predict$model[14]
feddata.predict$model[15]
feddata.predict$model[16]
feddata.predict$model[17]
feddata.predict$model[18]
feddata.predict$model[19]
feddata.predict$model[20]
attributes(feddata_
attributes(feddata)
attributes(feddata)
attributes(feddata.predict)
feddata.predict[]1
feddata.predict[1]
feddata.predict[2]
# predict the next 12 months
feddata.predict <- forecast(feddata)
# Generating and comparing the predictions to the data set
matrix(c(feddata.predict$upper[,2],
         feddata.predict$mean,
         feddata.predict$lower[,2]),12, 3,
         dimnames=list( c(309:320), c("LB", "Pred", "UB")))
matrix(c(feddata.predict$upper[,2], feddata.predict$mean, feddata.predict$lower[,2])
)
matrix(c(feddata.predict$upper[,2], feddata.predict$mean, feddata.predict$lower[,2]), ncol=3)
feddata.predict$lower
feddata.predict$upper
feddata.predict$mean
feddata.predict$lower[,2]
cbind(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$lower[,2])
cbind(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2], make.row.names=FALSE)
cbind(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2])
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]))
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 26, 3)
length(feddata.predict)
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 10, 3)
length(feddata.predict$lower)
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 48, 3)
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 48, 3, byrow=FALSE)
head(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2])
head(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]))
head(feddata.predict$lower[,2])
head(feddata.predict$upper[,2])
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 48, 3, byrow=FALSE)
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 48, 3, byrow=TRUE)
matrix(c(feddata.predict$lower[,2], feddata.predict$mean, feddata.predict$upper[,2]), 48, 3)
matrix(feddata.predict$mean, feddata.preeict$lower[,2], feddata.predict$upper[,2]), 48, 3)
matrix(feddata.predict$mean, feddata.predict$lower[,2], feddata.predict$upper[,2]), 48, 3)
matrix(c(feddata.predict$mean, feddata.predict$lower[,2], feddata.predict$upper[,2]), 48, 3)
matrix(c(rev(feddata.predict$mean), feddata.predict$lower[,2], feddata.predict$upper[,2]), 48, 3)
matrix(c(feddata.predict$mean, rev(feddata.predict$lower[,2]), feddata.predict$upper[,2]), 48, 3)
matrix(c(feddata.predict$lower[,2], feddata.predict$upper[,2]), 48, 2)
matrix(c(feddata.predict$lower[,2], feddata.predict$upper[,2]))
q()
arima_fit$residuals
# plotting
plot(arima_fit$residuals, main="",  ylab = "Residuals", xlab="Time")
abline(a=0, b=0)
# histogram
hist(arima_fit$residuals, main="", ylab="Frequency", xlab="Residuals", xlim=c(-0.04, 0.04))
# histogram
hist(arima_fit$residuals, main="", ylab="Frequency", xlab="Residuals")
# qq plot
qqnorm(arima_fit$residuals, ylab="Sample Quantiles", xlab="Theoretical Quantiles", main="")
qqline(arima_fit$residuals)
q()
f.p <- forecast(feddata, h=24)
library(forecast)
f.p <- forecast(feddata, h=24)
attributes(f.p)
f.p$mean
sum(f.p$mean) / f.p$mean[1]
sum(f.p$mean)
f.p$mean
f.p$mean[1]
f.p$lower[1][1]
head(f.p$lower)
feddata[1]
head(feddata)
tailfeddata)
tail(feddata)
tail(feddata)[6]
tail(f.p$lower)
tail(f.p$lower)[6]
tail(f.p$lower)[2][6]
tail(f.p$lower)[1][6]
tail(f.p$lower)[6]
tail(f.p$lower)[12]
tail(feddata)/tail(f.p$lower)[12]
tail(feddata)[6]/tail(f.p$lower)[12]
tail(feddata)[6]/tail(f.p$upper)[12]
tail(feddata)[6] - tail(f.p$upper)[12]
abs(tail(feddata)[6] - tail(f.p$upper)[12]) / tail(feddata)]6]
abs(tail(feddata)[6] - tail(f.p$upper)[12])) / tail(feddata)]6]
abs(tail(feddata)[6] - tail(f.p$upper)[12]) / tail(feddata)]6]
abs(tail(feddata)[6] - tail(f.p$upper)[12]) / tail(feddata)[6]
abs(tail(feddata)[6] - tail(f.p$lower)[12]) / tail(feddata)[6]
q()
